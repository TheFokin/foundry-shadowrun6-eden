name: Release Creation

env:
  NODE_VERSION: 22


on:
  push:
    tags:
      - 'release-*'


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: "20.x"

    - name: Load project details
      id: type
      uses: ActionsTools/read-json-action@main
      with:
        file_path: "./.github/release.json"
        prop_path: "project.type"


    - name: Load project includes
      id: config
      continue-on-error: true
      uses: ActionsTools/read-json-action@main
      with:
        file_path: "./.github/release.json"


    - name: Load system manifest
      id: manifest
      uses: ActionsTools/read-json-action@main
      with:
        file_path: "./${{ steps.type.outputs.value }}.json"


    # Set up our some variables for future use
    # Adapted from https://github.community/t/how-to-get-just-the-tag-name/16241/7
    # Tag name: ${{ env.TAG_NAME }}
    # Zip name: ${{ env.ZIP_NAME }}
    # Expected Release Download URL: ${{ env.RELEASE_DOWNLOAD_URL }}
    # Expected Release system.json URL: ${{ env.RELEASE_INSTALL_URL }}
    - name: Set up variables
      id: get_vars
      run: |
        TAG=${GITHUB_REF/refs\/tags\//}
        PACKAGE_ID=${{ steps.manifest.outputs.id }}
        PACKAGE_TYPE=${{ steps.type.outputs.value }}
        echo "TAG_NAME=$TAG" >> $GITHUB_ENV
        echo "PACKAGE_ID=$PACKAGE_ID" >> $GITHUB_ENV
        echo "PACKAGE_TYPE=$PACKAGE_TYPE" >> $GITHUB_ENV
        echo "ZIP_NAME=$PACKAGE_ID-$TAG.zip" >> $GITHUB_ENV
        echo "RELEASE_DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/$TAG/$PACKAGE_ID-$TAG.zip" >> $GITHUB_ENV
        echo "RELEASE_INSTALL_URL=https://github.com/${{ github.repository }}/releases/download/$TAG/$PACKAGE_TYPE.json" >> $GITHUB_ENV


    # Run some tests to make sure our `system.json` is correct
    # Exit before setting up node if not
    - name: Verify correct naming
      env:
        TAG_NAME: ${{ env.TAG_NAME }}
        RELEASE_DOWNLOAD: ${{ env.RELEASE_DOWNLOAD_URL }}
        PACKAGE_TYPE: ${{ env.PACKAGE_TYPE }}
        PACKAGE_VERSION: ${{ steps.manifest.outputs.version }}
        PACKAGE_DOWNLOAD: ${{ steps.manifest.outputs.download }}
      run: |
        # Validate that the tag being released matches the package version.
        if [[ ! $TAG_NAME == release-$PACKAGE_VERSION ]]; then
          echo "The $PACKAGE_TYPE.json version does not match tag name."
          echo "$PACKAGE_TYPE.json: $PACKAGE_VERSION"
          echo "tag name: $TAG_NAME"
          echo "Please fix this and push the tag again."
          exit 1
        fi

        # Validate that the package download url matches the release asset that will be created.
        if [[ ! $RELEASE_DOWNLOAD == $PACKAGE_DOWNLOAD ]]; then
          echo "The $PACKAGE_TYPE.json download url does not match the created release asset url."
          echo "$PACKAGE_TYPE.json: $PACKAGE_DOWNLOAD"
          echo "release asset url: $RELEASE_DOWNLOAD"
          echo "Please fix this and push the tag again."
          exit 1
        fi

    # compile packs
    - name: compile packs
      run: npm ci
    - run: npm run pack

    - name: Adjust manifest
      uses: TomaszKandula/variable-substitution@v1.0.2
      with:
        files: "system.json"
      env:
        flags.hotReload: false

    - name: Determine archive contents
      id: archive
      uses: actions/github-script@v6
      env:
        ESMODULES: ${{ steps.manifest.outputs.esmodules }}
        INCLUDES: ${{ steps.config.outputs.includes }}
        LANGUAGES: ${{ steps.manifest.outputs.languages }}
        PACKS: ${{ steps.manifest.outputs.packs }}
        STYLES: ${{ steps.manifest.outputs.styles }}
      with:
        result-encoding: string
        script: |
          const manifest = {};
          if ( process.env.ESMODULES ) manifest.esmodules = JSON.parse(process.env.ESMODULES);
          if ( process.env.INCLUDES ) manifest.includes = JSON.parse(process.env.INCLUDES);
          if ( process.env.LANGUAGES ) manifest.languages = JSON.parse(process.env.LANGUAGES);
          if ( process.env.PACKS ) manifest.packs = JSON.parse(process.env.PACKS);
          if ( process.env.STYLES ) manifest.styles = JSON.parse(process.env.STYLES);
          const includes = [
            "${{ env.PACKAGE_TYPE }}.json",
            ...(manifest.esmodules ?? []),
            ...(manifest.esmodules?.map(s => `${s}.map`) ?? []),
            ...(manifest.styles ?? []),
            ...(manifest.packs?.map(p => p.path) ?? []),
            ...(manifest.languages?.map(l => l.path) ?? []),
            ...(manifest.includes ?? [])
          ];
          return includes.join(" ");


    - name: Zip package
      run: zip ${{ env.ZIP_NAME }} -r ${{ steps.archive.outputs.result }}


    # - name: Fetch Release Body
    #   id: release
    #   uses: cardinalby/git-get-release-action@v1
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #   with:
    #     tag: ${{ env.TAG_NAME }}
    #     doNotFailIfNotFound: true


    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ env.TAG_NAME }}
        draft: false
        prerelease: false     # Set to true for beta release
        # makeLatest: false   # Uncomment for beta release
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './${{ env.PACKAGE_TYPE }}.json, ./${{ env.ZIP_NAME }}'
        tag: ${{ env.TAG_NAME }}
        body: |
          ${{ github.event.release.body }}

          **Installation:** To manually install this release, please use the following manifest URL: ${{ env.RELEASE_INSTALL_URL }}

    # - name: Foundry Release API
    #   uses: fjogeleit/http-request-action@v1
    #   with:
    #     url: 'https://api.foundryvtt.com/_api/packages/release_version'
    #     method: 'POST'
    #     customHeaders: '{"Content-Type": "application/json", "Authorization": "${{ secrets.FOUNDRY_API_TOKEN }}"}'
    #     data: 
    #         '{
    #             "id": "${{ env.PACKAGE_ID }}",
    #             "dry_run": false,
    #             "release": {
    #                 "version": "${{ steps.manifest.outputs.version }}",
    #                 "manifest": "${{ env.RELEASE_INSTALL_URL }}",
    #                 "notes": "${{ steps.create_version_release.outputs.html_url }}",
    #                 "compatibility": {
    #                     "minimum": "${{ steps.manifest.outputs.compatibility.minimum }}",
    #                     "verified": "${{ steps.manifest.outputs.compatibility.verified }}",
    #                     "maximum": ""
    #                 }
    #             }
    #         }'

    # Printing Github Action variables
    # - name: Dump GitHub context
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    #   run: echo "$GITHUB_CONTEXT"
    # - name: Dump job context
    #   env:
    #     JOB_CONTEXT: ${{ toJson(job) }}
    #   run: echo "$JOB_CONTEXT"
    # - name: Dump steps context
    #   env:
    #     STEPS_CONTEXT: ${{ toJson(steps) }}
    #   run: echo "$STEPS_CONTEXT"
    # - name: Dump runner context
    #   env:
    #     RUNNER_CONTEXT: ${{ toJson(runner) }}
    #   run: echo "$RUNNER_CONTEXT"
    # - name: Dump strategy context
    #   env:
    #     STRATEGY_CONTEXT: ${{ toJson(strategy) }}
    #   run: echo "$STRATEGY_CONTEXT"
    # - name: Dump matrix context
    #   env:
    #     MATRIX_CONTEXT: ${{ toJson(matrix) }}
    #   run: echo "$MATRIX_CONTEXT"

    # - name: Show default environment variables
    #   run: |
    #     echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
    #     echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
    #     echo "The run id is: $GITHUB_RUN_ID"
    #     echo "The GitHub Actor's username is: $GITHUB_ACTOR"
    #     echo "GitHub SHA: $GITHUB_SHA"